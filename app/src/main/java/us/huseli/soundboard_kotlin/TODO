Prevent deletion of last category

Menu option: "on re-press" (or something).
Meaning: If sound is pressed when it's already playing, one of these will happen:
1. Playback stops
2. Playback stops and starts over immediately
3. New playback starts while current one still playing


If trying to add sounds without permission (like after a reinstall), MediaPlayer.prepare() throws
IOException. Maybe catch that and alert the user that they could make some menu choice to
re-init the failed sound URIs?
Perhaps use some 'failedSounds' list in appViewModel or something. But where to populate it?
SoundPlayer.setup() would be the obvious choise but that class doesn't know about Sound, only
Uri and volume.
setup() is called by SoundViewModel.getPlayer(), which DOES know about Sound, so maybe here?
But then we have to re-throw the IOException to it.
Also, it's a viewmodel and does not, and should not, know about other viewmodels.
getPlayer is in turn called by SoundAdapter.SoundViewHolder.bind(), so maybe here?
But we can't throw the exception all the way here. Maybe set some 'noPermission' bool on
SoundPlayer instead? And check it here, and if true add sound to 'failedSounds'.

OK, failedSounds and noPermission is implemented, now:
- Show alert
- Add menu item "re-add failed sounds"
- Implement that functionality
- Remove test data from SoundViewHolder.bind and Sound.constructor


Make sure old adapters & viewholders are garbage collected on config change/rotate, they don't seem
to be doing so automatically


Write tests :-//////////////


Try working with EmptySound when moving around.
Start drag: Sound removed from adapter, EmptySound added in its place
Sound is dragged to new position: EmptySound moved there
Sound is dragged to new recyclerview: EmptySound moved there
???


Trash CategoryListFragment, put it all in MainActivity?

######## PROBABLY NOT #########

Try setting AudioAttributes: https://developer.android.com/reference/kotlin/android/media/AudioAttributes
- FLAG_LOW_LATENCY (Deprecated: Use AudioTrack.Builder#setPerformanceMode(int) with AudioTrack#PERFORMANCE_MODE_LOW_LATENCY to control performance.)
- USAGE_MEDIA
Comment: This is probably WAY too cumbersome to be worth it.
See: https://mindtherobot.com/blog/580/android-audio-play-a-wav-file-on-an-audiotrack/

Share sounds from other apps to this one -- seems like it's not possible to do this and get
persistable permissions to the URI? :(
