When moving sound to another category, its order should be set so it's the last

Playing-icon sometimes doesn't turn off on sound end

Scrap the nested recyclerviews and implement getItemViewType?
https://www.raywenderlich.com/272-intermediate-recyclerview-tutorial-with-kotlin

Shit fucks up with colours, names etc when adding new sound :((((((

Trash CategoryViewModel?

SoundListViewModelFactory not used

Don't redraw the whole thing for each little change
Perhaps use lists of sounds and categories in MainActivity, which are populated from their
respective list viewmodels, make MainActivity wrap them in item viewmodels, and pass those to
fragments, adapters and viewholders?
Or pass around only id's (categoryId, SoundId) and let fragments produce their own viewmodels
via viewModels{}, instead of using the activity's viewmodels, just via id's, so everything gets
decoupled?

Maybe the ideal is to have a separate observer for each item. So each piece of the UI holds full
responsibility for its containing item and only reacts to relevant changes to it:
* CategoryListFragment reacts to category addition, deletion, and change in order
* CategoryAdapter.ViewHolder reacts to changes in category name and colour
* CategoryAdapter.ViewHolder also observes its category's sound list, and so reacts to changes in
  order within it
* SoundAdapter.ViewHolder reacts to sound name and volume changes

Drag sounds between categories? Is it even possible?

Does title in topmenu have to take so much space?
A: https://stackoverflow.com/q/15917973

Check "!!" calls for NullPointerException

Trash CategoryListFragment, put it all in MainActivity?

######## MAYBES #########

Try setting AudioAttributes: https://developer.android.com/reference/kotlin/android/media/AudioAttributes
- FLAG_LOW_LATENCY (Deprecated: Use AudioTrack.Builder#setPerformanceMode(int) with AudioTrack#PERFORMANCE_MODE_LOW_LATENCY to control performance.)
- USAGE_MEDIA

Maybe not use LiveData for SoundViewModel and CategoryViewModel attributes at all, but rely on them
updating when their respective ListViewModel updates?
