Fix repress mode stuff


When starting app with category collapsed=true, audiofiles/soundplayers etc are not loaded until
it is expanded. Load all straight away on background thread instead.


When in sound select mode, disable and grey out category buttons to avoid confusion


On "instant replay" stop mode, make sure everything is completely initialized before running play() again


Allow volume up to 120, mark this with red in sound card's progressbar


Candidates to run on background thread
High gain:
* AudioFile.writeAudioTrack  -- done, but only for encoded audio
* CodecCallback.putOutputBuffer (ByteBuffer.put() eats surprisingly much CPU)  -- done
Lesser gain:
* SoundViewHolder.setDuration
* CodecCallback.on*
* SoundPlayer.togglePlay


Count sound playback as started on first instance of onInputBufferAvailable()?  -- testing this


Q: Some sounds (especially short ones) don't play? writeAudioTrack() gets called once but then nothing.
A: "If you don't call write() first, or if you call write() but with an insufficient amount of data,
then the track will be in underrun state at play(). In this case, playback will not actually start
playing until the data path is filled to a device-specific minimum level."
-- https://developer.android.com/reference/kotlin/android/media/AudioTrack#play

Maybe need to send it at least BUFFER_SIZE bytes? Trying padding last buffer with zeros.
Padding seems to work! \o/

Q: After playing some sounds it gets all choppy, is something hogging CPU/memory?
A: It was softStop eternally waiting for playback to start, which it didn't because of above.


Error on manual stop:
2021-01-15 04:12:50.886 10813-10813 E/MediaCodec: getBufferAndFormat - invalid operation (the index 1 is not owned by client)
2021-01-15 04:12:50.896 10813-10813 E/AudioFile: CODEC: Error getting/writing output buffer (java.lang.IllegalStateException)
    java.lang.IllegalStateException
        at android.media.MediaCodec.getBuffer(Native Method)
        at android.media.MediaCodec.getOutputBuffer(MediaCodec.java:3270)
        at us.huseli.soundboard.helpers.AudioFile$CodecCallback.onOutputBufferAvailable(AudioFile.kt:431)
        at android.media.MediaCodec$EventHandler.handleCallback(MediaCodec.java:1749)
        at android.media.MediaCodec$EventHandler.handleMessage(MediaCodec.java:1696)
        at android.os.Handler.dispatchMessage(Handler.java:107)
        at android.os.Looper.loop(Looper.java:237)
        at android.app.ActivityThread.main(ActivityThread.java:8167)
        at java.lang.reflect.Method.invoke(Native Method)
        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:496)
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1100)


Why are there underruns? Seem to correlate to this:
2021-01-14 03:54:25.792 13390-28953 I/ACodec: [OMX.SEC.flac.dec] ExecutingState flushing now (codec owns 0/5 input, 2/9 output).
(Number of overruns after one of this gets incremented by number of non-codec-owned outputs)
UPDATE: No, they don't seem to correlate.


AudioFile:
We need to somehow:
1. Know when the audio priming is ready (all priming data has been read from codec AND fed into audioTrack)
2. Then, and at no time before, run codec.flush()

On user initiated stop: do forceStop() which cuts playback and cancels codec etc
After playback has run its length and has not been stopped by user:
1. Somehow check if CodecCallback is still doing decoding/playback queuing
2. When it's not: do the stop stuff


Look at backup_descriptor.xml stuff


Settings fragment: set app language, night mode


Show some progress indicator while loading sounds (not only on app init but also reorder etc)


Can the responsiveness (time from soundcard press to sound playing) be improved further?


Check for stuff that could be done in worker threads


When collapsing last category, its header disappears from view until you scroll, then reappears
CategoryAdapter.onViewDetachedFromWindow() is run for that holder and it's hidden. Why?


On ordering enabled: scroll with 2 fingers?


Clean up Log calls


After altering a category, play icon & volumebar on sounds dont work? (Cannot recreate?)


In some instance, when creating categories and moving sounds around, an empty category was
populated with another category's sounds (How to recreate?)


Run release() on MediaPlayer objects at some point (research activity/app lifecycle to decide when)
Or just let GC take care of it?


Check for usages of adapterPosition/layoutPosition and correct according to
https://developer.android.com/reference/kotlin/androidx/recyclerview/widget/RecyclerView#positions-in-recyclerview:


Problem: UI gets laggy on first scroll because Sound recyclerviews that are at first not visible
don't get populated until they are. Their sounds are fetched and sent via submitList(), but nothing
more is done until the recyclerview enters the window.
Solution #1: Do as much work as possible (mainly getPlayer()) before this happens
Solution #2: Fuck around with RecyclerView.LayoutManager.LayoutPrefetchRegistry
    (https://developer.android.com/reference/kotlin/androidx/recyclerview/widget/RecyclerView.LayoutManager#collectinitialprefetchpositions)
    If API level >= 21 (L+), tryGetViewHolderForPositionByDeadline() scans holder.itemView for
    nested recyclerviews after creating holder via adapter.createViewHolder(). It does so via
    RecyclerView.findNestedRecyclerView() and then adds it to holder.mNestedRecyclerView.
    GapWorker.prefetchInnerRecyclerViewWithDeadline() is run with that nested RecyclerView as
    argument.
    Seems like there is an issue here somewhere though? https://stackoverflow.com/questions/54150680/nested-recyclerview-prefetch-not-working-on-initial-scroll-only

2020-12-03: Trying out #2
2020-12-03: Trying out #1 also


If trying to add sounds without permission (like after a reinstall), MediaPlayer.prepare() throws
IOException. Maybe catch that and alert the user that they could make some menu choice to
re-init the failed sound URIs?
Perhaps use some 'failedSounds' list in appViewModel or something. But where to populate it?
SoundPlayer.setup() would be the obvious choise but that class doesn't know about Sound, only
Uri and volume.
setup() is called by SoundViewModel.getPlayer(), which DOES know about Sound, so maybe here?
But then we have to re-throw the IOException to it.
Also, it's a viewmodel and does not, and should not, know about other viewmodels.
getPlayer is in turn called by SoundAdapter.SoundViewHolder.bind(), so maybe here?
But we can't throw the exception all the way here. Maybe set some 'noPermission' bool on
SoundPlayer instead? And check it here, and if true add sound to 'failedSounds'.

OK, failedSounds and noPermission is implemented, now:
- Show alert
- Add menu item "re-add failed sounds"
- Implement that functionality
- Remove test data from SoundViewHolder.bind and Sound.constructor


Make sure old adapters & viewholders are garbage collected on config change/rotate, they don't seem
to be doing so automatically


Write tests :-//////////////


Trash CategoryListFragment, put it all in MainActivity?

######## PROBABLY NOT #########

Try setting AudioAttributes: https://developer.android.com/reference/kotlin/android/media/AudioAttributes
- FLAG_LOW_LATENCY (Deprecated: Use AudioTrack.Builder#setPerformanceMode(int) with AudioTrack#PERFORMANCE_MODE_LOW_LATENCY to control performance.)
- USAGE_MEDIA
Comment: This is probably WAY too cumbersome to be worth it.
See: https://mindtherobot.com/blog/580/android-audio-play-a-wav-file-on-an-audiotrack/

Share sounds from other apps to this one -- seems like it's not possible to do this and get
persistable permissions to the URI? :(
